<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://maven.apache.org/POM/4.0.0"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <artifactId>fuse-starter-java</artifactId>

  <build>
    <extensions>
      <extension>
        <artifactId>os-maven-plugin</artifactId>
        <groupId>kr.motd.maven</groupId>
        <version>1.6.1</version>
      </extension>
    </extensions>

    <plugins>
      <plugin>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <groupId>org.springframework.boot</groupId>
      </plugin>
      <plugin>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <configuration>
          <configLocation>style/google_checks_modified.xml</configLocation>
          <excludes>**/ProtobufMessages.java</excludes>
          <violationSeverity>warning</violationSeverity>
        </configuration>
        <executions>
          <execution>
            <!-- Run checkstyle as part of the validate phase -->
            <goals>
              <goal>check</goal>
            </goals>
            <!-- See https://maven.apache.org/plugins/maven-checkstyle-plugin/plugin-info.html
                 for the different checkstyle goals-->
            <phase>validate</phase>
          </execution>
        </executions>
        <groupId>org.apache.maven.plugins</groupId>
        <version>3.1.0</version>
      </plugin>
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <excludedGroups>org.galatea.starter.IntegrationTestCategory</excludedGroups>
          <!-- skips surefire tests without skipping failsafe tests. Property
            value seems to magically default to false -->
          <!-- See https://stackoverflow.com/questions/6612344/prevent-unit-tests-in-maven-but-allow-integration-tests -->
          <skipTests>${skip.surefire.tests}</skipTests>
        </configuration>
        <groupId>org.apache.maven.plugins</groupId>
      </plugin>
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <groups>org.galatea.starter.IntegrationTestCategory</groups>
          <includes>
            <include>**/*.java</include>
          </includes>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
        <groupId>org.apache.maven.plugins</groupId>
      </plugin>
      <plugin>
        <artifactId>protobuf-maven-plugin</artifactId>
        <configuration>
          <pluginArtifact>
            io.grpc:protoc-gen-grpc-java:1.4.0:exe:${os.detected.classifier}
          </pluginArtifact>
          <pluginId>grpc-java</pluginId>
          <protocArtifact>
            com.google.protobuf:protoc:3.3.0:exe:${os.detected.classifier}
          </protocArtifact>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>compile-custom</goal>
            </goals>
          </execution>
        </executions>
        <groupId>org.xolstice.maven.plugins</groupId>
        <version>0.6.1</version>
      </plugin>
    </plugins>
  </build>
  <dependencies>
    <!-- Spring boot starter -->
    <dependency>
      <artifactId>spring-boot-starter</artifactId>
      <exclusions>
        <!-- Exclude so we can use log4j instead -->
        <exclusion>
          <artifactId>spring-boot-starter-logging</artifactId>
          <groupId>org.springframework.boot</groupId>
        </exclusion>
      </exclusions>
      <groupId>org.springframework.boot</groupId>
    </dependency>

    <!-- Use log4j instead of logback -->
    <dependency>
      <artifactId>spring-boot-starter-log4j2</artifactId>
      <groupId>org.springframework.boot</groupId>
    </dependency>

    <dependency>
      <artifactId>spring-cloud-starter-openfeign</artifactId>
      <groupId>org.springframework.cloud</groupId>
      <version>2.0.1.RELEASE</version>
    </dependency>

    <!--Spring Cloud Sleuth for distributed log tracing-->
    <dependency>
      <artifactId>spring-cloud-starter-sleuth</artifactId>
      <groupId>org.springframework.cloud</groupId>
      <version>2.2.1.RELEASE</version>
    </dependency>

    <!-- Required for log4j to process log4j2.yml -->
    <!-- See: springframework.guru/log4j-2-configuration-using-yaml -->
    <dependency>
      <artifactId>jackson-dataformat-yaml</artifactId>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
    </dependency>


    <!-- Use spring-aop and aspectj for our aspects -->
    <dependency>
      <artifactId>spring-aop</artifactId>
      <groupId>org.springframework</groupId>
    </dependency>
    <dependency>
      <artifactId>aspectjweaver</artifactId>
      <groupId>org.aspectj</groupId>
    </dependency>

    <!-- Spring boot jms for getting messages from queues -->
    <dependency>
      <artifactId>spring-boot-starter-activemq</artifactId>
      <groupId>org.springframework.boot</groupId>
    </dependency>
    <dependency>
      <artifactId>activemq-broker</artifactId>
      <exclusions>
        <exclusion>
          <artifactId>guava</artifactId>
          <groupId>com.google.guava</groupId>
        </exclusion>
      </exclusions>
      <groupId>org.apache.activemq</groupId>
    </dependency>

    <!-- Spring boot web for rest services -->
    <dependency>
      <artifactId>spring-boot-starter-web</artifactId>
      <exclusions>
        <exclusion>
          <!-- Exclude Tomcat in favour of Jetty (for performance reasons) -->
          <artifactId>spring-boot-starter-tomcat</artifactId>
          <groupId>org.springframework.boot</groupId>
        </exclusion>
      </exclusions>
      <groupId>org.springframework.boot</groupId>
    </dependency>

    <dependency>
      <artifactId>spring-boot-starter-jetty</artifactId>
      <groupId>org.springframework.boot</groupId>
    </dependency>

    <!-- SWAGGER for API documentation -->
    <dependency>
      <artifactId>springfox-swagger2</artifactId>
      <groupId>io.springfox</groupId>
      <version>2.9.2</version>
    </dependency>

    <dependency>
      <artifactId>springfox-swagger-ui</artifactId>
      <groupId>io.springfox</groupId>
      <version>2.9.2</version>
    </dependency>

    <!-- Web content negotiation -->
    <dependency>
      <artifactId>protobuf-java</artifactId>
      <groupId>com.google.protobuf</groupId>
      <version>3.16.1</version>
    </dependency>

    <dependency>
      <artifactId>protobuf-java-format</artifactId>
      <groupId>com.googlecode.protobuf-java-format</groupId>
      <version>1.4</version>
    </dependency>

    <dependency>
      <artifactId>jackson-dataformat-xml</artifactId>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
    </dependency>

    <!-- Converting between POJOs and CSV -->
    <dependency>
      <artifactId>jackson-dataformat-csv</artifactId>
      <groupId>com.fasterxml.jackson.dataformat</groupId>
      <version>2.8.8</version>
    </dependency>

    <dependency>
      <artifactId>jackson-core</artifactId>
      <groupId>com.fasterxml.jackson.core</groupId>
      <version>2.9.9</version>
    </dependency>

    <dependency>
      <artifactId>jackson-annotations</artifactId>
      <groupId>com.fasterxml.jackson.core</groupId>
      <version>2.9.9</version>
    </dependency>

    <dependency>
      <artifactId>jackson-databind</artifactId>
      <groupId>com.fasterxml.jackson.core</groupId>
      <version>2.9.10.8</version>
    </dependency>

    <!-- JAXB - converting between POJOs and XML -->
    <dependency>
      <artifactId>javax.activation</artifactId>
      <groupId>com.sun.activation</groupId>
      <version>1.2.0</version>
    </dependency>

    <dependency>
      <artifactId>jaxb-api</artifactId>
      <groupId>javax.xml.bind</groupId>
      <version>${jaxb.api.version}</version>
    </dependency>

    <dependency>
      <artifactId>jaxb-core</artifactId>
      <groupId>com.sun.xml.bind</groupId>
      <version>2.3.0</version>
    </dependency>

    <dependency>
      <artifactId>jaxb-impl</artifactId>
      <groupId>com.sun.xml.bind</groupId>
      <version>${jaxb.api.version}</version>
    </dependency>

    <!-- Enable production-ready features with actuator -->
    <!-- See: http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints -->
    <!-- and: www.baeldung.com/spring-boot-actuators -->
    <dependency>
      <artifactId>spring-boot-starter-actuator</artifactId>
      <groupId>org.springframework.boot</groupId>
    </dependency>

    <!-- Spring data to connect to sql db. -->
    <dependency>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
      <groupId>org.springframework.boot</groupId>
    </dependency>

    <!-- H2 database for persistence -->
    <dependency>
      <artifactId>h2</artifactId>
      <groupId>com.h2database</groupId>
    </dependency>

    <!-- Lombok for tostring, hashcode, etc -->
    <!-- See: https://projectlombok.org/ -->
    <!-- Eclipse plugin to recognizes the Lombok annotations: http://jnb.ociweb.com/jnb/jnbJan2010.html#installation -->
    <!-- IntelliJ plugin to recognize Lombok annotations: https://plugins.jetbrains.com/plugin/6317 -->
    <dependency>
      <artifactId>lombok</artifactId>
      <groupId>org.projectlombok</groupId>
      <scope>provided</scope>
    </dependency>

    <!-- Gives us a logging aspect -->
    <dependency>
      <artifactId>aspect4log</artifactId>
      <groupId>net.sf.aspect4log</groupId>
      <version>1.0.7</version>
    </dependency>

    <!-- Useful collections -->
    <dependency>
      <artifactId>commons-collections4</artifactId>
      <groupId>org.apache.commons</groupId>
      <version>4.1</version>
    </dependency>

    <dependency>
      <artifactId>validation-api</artifactId>
      <groupId>javax.validation</groupId>
      <version>2.0.1.Final</version>
    </dependency>

    <!-- Excel spreadsheet reading and writing -->
    <dependency>
      <artifactId>poi</artifactId>
      <groupId>org.apache.poi</groupId>
      <version>4.1.0</version>
    </dependency>
    <dependency>
      <artifactId>poi-ooxml</artifactId>
      <groupId>org.apache.poi</groupId>
      <version>4.1.0</version>
    </dependency>

    <!-- Ehcache for caching. Having ehcache.xml in src/main/resources tells SpringBoot to use EhCache as the caching implementation for @Cacheable -->
    <dependency>
      <artifactId>ehcache</artifactId>
      <groupId>net.sf.ehcache</groupId>
    </dependency>

    <!-- Spring caching framework inside this -->
    <dependency>
      <artifactId>spring-context</artifactId>
      <groupId>org.springframework</groupId>
      <version>5.1.2.RELEASE</version>
    </dependency>

    <!-- Support for Ehcache and others -->
    <dependency>
      <artifactId>spring-context-support</artifactId>
      <groupId>org.springframework</groupId>
      <version>5.1.2.RELEASE</version>
    </dependency>

    <dependency>
      <artifactId>feign-core</artifactId>
      <groupId>io.github.openfeign</groupId>
      <version>9.5.1</version>
    </dependency>
    <dependency>
      <artifactId>feign-jackson</artifactId>
      <groupId>io.github.openfeign</groupId>
      <version>9.5.1</version>
    </dependency>

    <!-- Testing dependencies -->
    <dependency>
      <artifactId>spring-boot-starter-test</artifactId>
      <groupId>org.springframework.boot</groupId>
      <scope>test</scope>
    </dependency>
    <!-- WireMock import for stubbing external REST services, see IexRestControllerTest.java -->
    <dependency>
      <artifactId>wiremock-jre8</artifactId>
      <groupId>com.github.tomakehurst</groupId>
      <scope>test</scope>
      <version>2.24.1</version>
    </dependency>
    <dependency>
      <artifactId>spring-cloud-contract-wiremock</artifactId>
      <groupId>org.springframework.cloud</groupId>
      <scope>test</scope>
      <version>2.0.1.RELEASE</version>
    </dependency>
    <!-- Useful for waiting for an async task to complete -->
    <dependency>
      <artifactId>awaitility</artifactId>
      <groupId>org.awaitility</groupId>
      <scope>test</scope>
      <version>2.0.0</version>
    </dependency>
    <dependency>
      <artifactId>spring-mock-mvc</artifactId>
      <groupId>io.rest-assured</groupId>
      <scope>test</scope>
      <version>3.3.0</version>
    </dependency>
    <!-- Allows us to parameterize tests -->
    <dependency>
      <artifactId>JUnitParams</artifactId>
      <groupId>pl.pragmatists</groupId>
      <scope>test</scope>
      <version>1.0.5</version>
    </dependency>
    <!-- Allows us to run test suites that include/exclude junit categories -->
    <dependency>
      <artifactId>junit-toolbox</artifactId>
      <groupId>com.googlecode.junit-toolbox</groupId>
      <version>2.2</version>
    </dependency>
  </dependencies>
  <groupId>org.galatea</groupId>
  <modelVersion>4.0.0</modelVersion>

  <name>starter-java</name>
  <packaging>jar</packaging>

  <parent>
    <artifactId>spring-boot-starter-parent</artifactId>
    <groupId>org.springframework.boot</groupId>
    <version>2.1.0.RELEASE</version>
  </parent>

  <properties>
    <argLine>
      -Dapplication.name=${project.artifactId}
      -Dlog4j.configurationFile=log4j2-test.yml
      -Dserver.port=8080
    </argLine>
    <java.version>11</java.version>
    <jaxb.api.version>2.3.1</jaxb.api.version>
    <!-- VM and application args used during maven steps, e.g. mvn test -->
    <!-- Use log config that writes to stdout so that application logs during tests show up in Jenkins build logs -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <skip.surefire.tests>${skipTests}</skip.surefire.tests>
    <sonar.coverage.exclusions>
      src/main/java/org/galatea/starter/domain/**,
      src/main/java/org/galatea/starter/entrypoint/messagecontracts/**,
      **/*Config.java,
      **/*Exception.java,
      **/FuseHttpTraceFilter.java,
      **/FuseMessageListenerContainer.java,
      **/Tracer.java,
      **/Application.java
    </sonar.coverage.exclusions>
    <sonar.exclusions>**/ProtobufMessages.java</sonar.exclusions>
    <sonar.host.url>https://sonarcloud.io</sonar.host.url>
    <!-- Allow us to skip Unit Tests only, if need be, with -Dskip.surefire.tests, but retain the skip all tests functionality of -DskipTests -->
    <sonar.organization>galatea-associates</sonar.organization>
  </properties>

  <url>https://github.com/GalateaRaj/fuse-starter-java</url>
  <version>0.0.1-SNAPSHOT</version>
</project>
